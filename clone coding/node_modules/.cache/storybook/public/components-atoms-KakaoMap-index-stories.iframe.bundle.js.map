{"version":3,"file":"components-atoms-KakaoMap-index-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;AACA;;AAEA;AAEA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAlDA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;;AAEA;AAMA;AACA;AACA;AACA;AACA","sources":["webpack://mad_mansion/./src/components/atoms/KakaoMap/index.tsx","webpack://mad_mansion/./src/components/atoms/KakaoMap/style.ts"],"sourcesContent":["// index.ts\n\nimport React, { useEffect, useRef } from 'react';\nimport * as S from './style';\n\ndeclare const kakao: any; // for using kakao map sdk\n\n// 위치 데이터 type 정의\ninterface PositionProps {\n    title: string;\n    latitude: number;\n    longitude: number;\n}\n\nexport interface KakaoMapProps {\n    address?: string;\n    positions?: Array<PositionProps>;\n    height?: string;\n}\n\nexport function KakaoMap({ address, positions, height = '100%' }: KakaoMapProps): React.ReactElement {\n    const kakaoMapRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        const kakaoMapElement = kakaoMapRef.current;\n        const options = {\n            center: new kakao.maps.LatLng(37.566826, 126.9786567),\n            level: 3\n        };\n        const kakaoMap = new kakao.maps.Map(kakaoMapElement, options);\n        const ps = new kakao.maps.services.Places();\n\n        function placesSearchCB(data: any, status: any, pagination: any) {\n            if (status === kakao.maps.services.Status.OK) {\n                // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\n                // LatLngBounds 객체에 좌표를 추가합니다\n                var bounds = new kakao.maps.LatLngBounds();\n\n                for (var i = 0; i < data.length; i++) {\n                    bounds.extend(new kakao.maps.LatLng(data[i].y, data[i].x));\n                }\n\n                // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\n                kakaoMap.setBounds(bounds);\n            }\n        }\n\n        ps.keywordSearch(address, placesSearchCB);\n\n        if (positions) {\n            // 마커 클러스터러를 생성합니다\n            var clusterer = new kakao.maps.MarkerClusterer({\n                map: kakaoMap, // 마커들을 클러스터로 관리하고 표시할 지도 객체\n                averageCenter: true, // 클러스터에 포함된 마커들의 평균 위치를 클러스터 마커 위치로 설정\n                minLevel: 8 // 클러스터 할 최소 지도 레벨\n            });\n\n            // 데이터를 가져와 마커를 생성하고 클러스터러 객체에 넘겨줍니다\n            var markers = positions.map(function (position: any, i: any) {\n                return new kakao.maps.Marker({\n                    position: new kakao.maps.LatLng(position.latitude, position.longitude)\n                });\n            });\n\n            // 클러스터러에 마커들을 추가합니다\n            clusterer.addMarkers(markers);\n        }\n    }, [address, positions]);\n\n    return <S.Container ref={kakaoMapRef} height={height} />;\n}","// style.ts\n\nimport styled from 'styled-components';\n\ninterface ContainerProps {\n    height: string;\n}\n\nexport const Container = styled.div<ContainerProps>`\n    width: 100%;\n    height: ${(props) => '28rem'};\n    border-radius: 0.3rem;\n`;"],"names":[],"sourceRoot":""}