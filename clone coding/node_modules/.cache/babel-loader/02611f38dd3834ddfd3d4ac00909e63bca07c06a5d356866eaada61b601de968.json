{"ast":null,"code":"var _jsxFileName = \"/Users/parkbyeongchan/Documents/KAIST/2023/SUMMER/\\u1106\\u1169\\u11AF\\u110B\\u1175\\u11B8\\u110F\\u1162\\u11B7\\u1111\\u1173/3\\u110C\\u116E\\u110E\\u1161/mad_mansion/src/components/atoms/Lable/index.tsx\";\n// index.tsx\n\nimport React from 'react';\nimport * as S from './style';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function Input({\n  id,\n  description,\n  inputType,\n  ...props\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: inputType ? /*#__PURE__*/_jsxDEV(S.Input, {\n      type: inputType,\n      id: id,\n      title: description,\n      autoComplete: \"off\",\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 24\n    }, this) : /*#__PURE__*/_jsxDEV(S.Input, {\n      type: \"text\",\n      id: id,\n      title: description,\n      autoComplete: \"off\",\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 113\n    }, this)\n  }, void 0, false);\n}\n_c = Input;\nvar _c;\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"names":["React","S","jsxDEV","_jsxDEV","Fragment","_Fragment","Input","id","description","inputType","props","children","type","title","autoComplete","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/parkbyeongchan/Documents/KAIST/2023/SUMMER/몰입캠프/3주차/mad_mansion/src/components/atoms/Lable/index.tsx"],"sourcesContent":["// index.tsx\n\nimport React from 'react';\nimport * as S from './style';\n\nexport interface InputProps {\n    id?: string; // 접근성\n    inputType?: string; // input type 설정\n    description?: string; // input 설명 (접근성)\n    invalid?: boolean; // is invalid\n    disabled?: boolean;\n    defaultValue?: string; // 기본값\n    placeholder?: string; // 힌트\n    value?: string | number;\n    height?: string;\n\n    onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    onKeyPress?: (e: React.KeyboardEvent) => void;\n}\n\nexport function Input({ id, description, inputType, ...props }: InputProps): React.ReactElement {\n    return (\n        <>{inputType ? <S.Input type={inputType} id={id} title={description} autoComplete=\"off\" {...props} /> : <S.Input type=\"text\" id={id} title={description} autoComplete=\"off\" {...props} />}</>\n    );\n}"],"mappings":";AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,KAAKC,CAAC,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAiB7B,OAAO,SAASC,KAAKA,CAAC;EAAEC,EAAE;EAAEC,WAAW;EAAEC,SAAS;EAAE,GAAGC;AAAkB,CAAC,EAAsB;EAC5F,oBACIP,OAAA,CAAAE,SAAA;IAAAM,QAAA,EAAGF,SAAS,gBAAGN,OAAA,CAACF,CAAC,CAACK,KAAK;MAACM,IAAI,EAAEH,SAAU;MAACF,EAAE,EAAEA,EAAG;MAACM,KAAK,EAAEL,WAAY;MAACM,YAAY,EAAC,KAAK;MAAA,GAAKJ;IAAK;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAAGf,OAAA,CAACF,CAAC,CAACK,KAAK;MAACM,IAAI,EAAC,MAAM;MAACL,EAAE,EAAEA,EAAG;MAACM,KAAK,EAAEL,WAAY;MAACM,YAAY,EAAC,KAAK;MAAA,GAAKJ;IAAK;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAAC,gBAAG,CAAC;AAErM;AAACC,EAAA,GAJeb,KAAK;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}