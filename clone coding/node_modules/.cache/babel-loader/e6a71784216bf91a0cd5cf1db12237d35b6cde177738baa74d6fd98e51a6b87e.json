{"ast":null,"code":"var _jsxFileName = \"/Users/parkbyeongchan/Documents/KAIST/2023/SUMMER/\\u1106\\u1169\\u11AF\\u110B\\u1175\\u11B8\\u110F\\u1162\\u11B7\\u1111\\u1173/3\\u110C\\u116E\\u110E\\u1161/mad_mansion/src/components/atoms/KakaoMap/index.tsx\",\n  _s = $RefreshSig$();\n// index.ts\n\nimport React, { useEffect, useRef } from 'react';\nimport * as S from './style';\n\n// for using kakao map sdk\n// 위치 데이터 type 정의\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function KakaoMap({\n  address,\n  positions,\n  height = '100%'\n}) {\n  _s();\n  const kakaoMapRef = useRef(null);\n  useEffect(() => {\n    const kakaoMapElement = kakaoMapRef.current;\n    const options = {\n      center: new kakao.maps.LatLng(37.566826, 126.9786567),\n      level: 3\n    };\n    const kakaoMap = new kakao.maps.Map(kakaoMapElement, options);\n    const ps = new kakao.maps.services.Places();\n    function placesSearchCB(data, status, pagination) {\n      if (status === kakao.maps.services.Status.OK) {\n        // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\n        // LatLngBounds 객체에 좌표를 추가합니다\n        var bounds = new kakao.maps.LatLngBounds();\n        for (var i = 0; i < data.length; i++) {\n          bounds.extend(new kakao.maps.LatLng(data[i].y, data[i].x));\n        }\n\n        // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\n        kakaoMap.setBounds(bounds);\n      }\n    }\n    ps.keywordSearch(address, placesSearchCB);\n    if (positions) {\n      // 마커 클러스터러를 생성합니다\n      var clusterer = new kakao.maps.MarkerClusterer({\n        map: kakaoMap,\n        // 마커들을 클러스터로 관리하고 표시할 지도 객체\n        averageCenter: true,\n        // 클러스터에 포함된 마커들의 평균 위치를 클러스터 마커 위치로 설정\n        minLevel: 8 // 클러스터 할 최소 지도 레벨\n      });\n\n      // 데이터를 가져와 마커를 생성하고 클러스터러 객체에 넘겨줍니다\n      var markers = positions.map(function (position, i) {\n        return new kakao.maps.Marker({\n          position: new kakao.maps.LatLng(position.latitude, position.longitude)\n        });\n      });\n\n      // 클러스터러에 마커들을 추가합니다\n      clusterer.addMarkers(markers);\n    }\n  }, [address, positions]);\n  return /*#__PURE__*/_jsxDEV(S.Container, {\n    ref: kakaoMapRef,\n    height: height\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 12\n  }, this);\n}\n_s(KakaoMap, \"Cx3e6m6Ijg2QBtdfC46JbQSTEYE=\");\n_c = KakaoMap;\nvar _c;\n$RefreshReg$(_c, \"KakaoMap\");","map":{"version":3,"names":["React","useEffect","useRef","S","jsxDEV","_jsxDEV","KakaoMap","address","positions","height","_s","kakaoMapRef","kakaoMapElement","current","options","center","kakao","maps","LatLng","level","kakaoMap","Map","ps","services","Places","placesSearchCB","data","status","pagination","Status","OK","bounds","LatLngBounds","i","length","extend","y","x","setBounds","keywordSearch","clusterer","MarkerClusterer","map","averageCenter","minLevel","markers","position","Marker","latitude","longitude","addMarkers","Container","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/parkbyeongchan/Documents/KAIST/2023/SUMMER/몰입캠프/3주차/mad_mansion/src/components/atoms/KakaoMap/index.tsx"],"sourcesContent":["// index.ts\n\nimport React, { useEffect, useRef } from 'react';\nimport * as S from './style';\n\ndeclare const kakao: any; // for using kakao map sdk\n\n// 위치 데이터 type 정의\ninterface PositionProps {\n    title: string;\n    latitude: number;\n    longitude: number;\n}\n\nexport interface KakaoMapProps {\n    address?: string;\n    positions?: Array<PositionProps>;\n    height?: string;\n}\n\nexport function KakaoMap({ address, positions, height = '100%' }: KakaoMapProps): React.ReactElement {\n    const kakaoMapRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        const kakaoMapElement = kakaoMapRef.current;\n        const options = {\n            center: new kakao.maps.LatLng(37.566826, 126.9786567),\n            level: 3\n        };\n        const kakaoMap = new kakao.maps.Map(kakaoMapElement, options);\n        const ps = new kakao.maps.services.Places();\n\n        function placesSearchCB(data: any, status: any, pagination: any) {\n            if (status === kakao.maps.services.Status.OK) {\n                // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\n                // LatLngBounds 객체에 좌표를 추가합니다\n                var bounds = new kakao.maps.LatLngBounds();\n\n                for (var i = 0; i < data.length; i++) {\n                    bounds.extend(new kakao.maps.LatLng(data[i].y, data[i].x));\n                }\n\n                // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\n                kakaoMap.setBounds(bounds);\n            }\n        }\n\n        ps.keywordSearch(address, placesSearchCB);\n\n        if (positions) {\n            // 마커 클러스터러를 생성합니다\n            var clusterer = new kakao.maps.MarkerClusterer({\n                map: kakaoMap, // 마커들을 클러스터로 관리하고 표시할 지도 객체\n                averageCenter: true, // 클러스터에 포함된 마커들의 평균 위치를 클러스터 마커 위치로 설정\n                minLevel: 8 // 클러스터 할 최소 지도 레벨\n            });\n\n            // 데이터를 가져와 마커를 생성하고 클러스터러 객체에 넘겨줍니다\n            var markers = positions.map(function (position: any, i: any) {\n                return new kakao.maps.Marker({\n                    position: new kakao.maps.LatLng(position.latitude, position.longitude)\n                });\n            });\n\n            // 클러스터러에 마커들을 추가합니다\n            clusterer.addMarkers(markers);\n        }\n    }, [address, positions]);\n\n    return <S.Container ref={kakaoMapRef} height={height} />;\n}"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,CAAC,MAAM,SAAS;;AAEF;AAE1B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAaA,OAAO,SAASC,QAAQA,CAAC;EAAEC,OAAO;EAAEC,SAAS;EAAEC,MAAM,GAAG;AAAsB,CAAC,EAAsB;EAAAC,EAAA;EACjG,MAAMC,WAAW,GAAGT,MAAM,CAAiB,IAAI,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACZ,MAAMW,eAAe,GAAGD,WAAW,CAACE,OAAO;IAC3C,MAAMC,OAAO,GAAG;MACZC,MAAM,EAAE,IAAIC,KAAK,CAACC,IAAI,CAACC,MAAM,CAAC,SAAS,EAAE,WAAW,CAAC;MACrDC,KAAK,EAAE;IACX,CAAC;IACD,MAAMC,QAAQ,GAAG,IAAIJ,KAAK,CAACC,IAAI,CAACI,GAAG,CAACT,eAAe,EAAEE,OAAO,CAAC;IAC7D,MAAMQ,EAAE,GAAG,IAAIN,KAAK,CAACC,IAAI,CAACM,QAAQ,CAACC,MAAM,CAAC,CAAC;IAE3C,SAASC,cAAcA,CAACC,IAAS,EAAEC,MAAW,EAAEC,UAAe,EAAE;MAC7D,IAAID,MAAM,KAAKX,KAAK,CAACC,IAAI,CAACM,QAAQ,CAACM,MAAM,CAACC,EAAE,EAAE;QAC1C;QACA;QACA,IAAIC,MAAM,GAAG,IAAIf,KAAK,CAACC,IAAI,CAACe,YAAY,CAAC,CAAC;QAE1C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,IAAI,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;UAClCF,MAAM,CAACI,MAAM,CAAC,IAAInB,KAAK,CAACC,IAAI,CAACC,MAAM,CAACQ,IAAI,CAACO,CAAC,CAAC,CAACG,CAAC,EAAEV,IAAI,CAACO,CAAC,CAAC,CAACI,CAAC,CAAC,CAAC;QAC9D;;QAEA;QACAjB,QAAQ,CAACkB,SAAS,CAACP,MAAM,CAAC;MAC9B;IACJ;IAEAT,EAAE,CAACiB,aAAa,CAAChC,OAAO,EAAEkB,cAAc,CAAC;IAEzC,IAAIjB,SAAS,EAAE;MACX;MACA,IAAIgC,SAAS,GAAG,IAAIxB,KAAK,CAACC,IAAI,CAACwB,eAAe,CAAC;QAC3CC,GAAG,EAAEtB,QAAQ;QAAE;QACfuB,aAAa,EAAE,IAAI;QAAE;QACrBC,QAAQ,EAAE,CAAC,CAAC;MAChB,CAAC,CAAC;;MAEF;MACA,IAAIC,OAAO,GAAGrC,SAAS,CAACkC,GAAG,CAAC,UAAUI,QAAa,EAAEb,CAAM,EAAE;QACzD,OAAO,IAAIjB,KAAK,CAACC,IAAI,CAAC8B,MAAM,CAAC;UACzBD,QAAQ,EAAE,IAAI9B,KAAK,CAACC,IAAI,CAACC,MAAM,CAAC4B,QAAQ,CAACE,QAAQ,EAAEF,QAAQ,CAACG,SAAS;QACzE,CAAC,CAAC;MACN,CAAC,CAAC;;MAEF;MACAT,SAAS,CAACU,UAAU,CAACL,OAAO,CAAC;IACjC;EACJ,CAAC,EAAE,CAACtC,OAAO,EAAEC,SAAS,CAAC,CAAC;EAExB,oBAAOH,OAAA,CAACF,CAAC,CAACgD,SAAS;IAACC,GAAG,EAAEzC,WAAY;IAACF,MAAM,EAAEA;EAAO;IAAA4C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC5D;AAAC9C,EAAA,CAlDeJ,QAAQ;AAAAmD,EAAA,GAARnD,QAAQ;AAAA,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}