{"ast":null,"code":"var _jsxFileName = \"/Users/parkbyeongchan/Documents/KAIST/2023/SUMMER/\\u1106\\u1169\\u11AF\\u110B\\u1175\\u11B8\\u110F\\u1162\\u11B7\\u1111\\u1173/3\\u110C\\u116E\\u110E\\u1161/clone coding/src/components/atoms/EventDate/index.tsx\";\n// index.tsx\n\nimport React from 'react';\nimport * as S from './style';\nimport { DateFormat1, DateFormat2 } from 'utils copy/DateFormat';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function EventDate({\n  eventDateType,\n  dateAt\n}) {\n  return /*#__PURE__*/_jsxDEV(S.Date, {\n    children: [eventDateType === 'Date' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: dateAt && DateFormat1({\n        dateAt: dateAt\n      })\n    }, void 0, false), eventDateType === 'Month' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: dateAt && DateFormat2({\n        dateAt: dateAt\n      })\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n}\n_c = EventDate;\nvar _c;\n$RefreshReg$(_c, \"EventDate\");","map":{"version":3,"names":["React","S","DateFormat1","DateFormat2","Fragment","_Fragment","jsxDEV","_jsxDEV","EventDate","eventDateType","dateAt","Date","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/parkbyeongchan/Documents/KAIST/2023/SUMMER/몰입캠프/3주차/clone coding/src/components/atoms/EventDate/index.tsx"],"sourcesContent":["// index.tsx\n\nimport React from 'react';\nimport * as S from './style';\nimport { DateFormat1, DateFormat2 } from 'utils copy/DateFormat';\n\nexport interface EventDateProps {\n    eventDateType: string;\n    dateAt: Date;\n}\n\nexport function EventDate({ eventDateType, dateAt }: EventDateProps): React.ReactElement {\n    return (\n        <S.Date>\n            {eventDateType === 'Date' && <>{dateAt && DateFormat1({ dateAt: dateAt })}</>}\n            {eventDateType === 'Month' && <>{dateAt && DateFormat2({ dateAt: dateAt })}</>}\n        </S.Date>\n    );\n}"],"mappings":";AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,KAAKC,CAAC,MAAM,SAAS;AAC5B,SAASC,WAAW,EAAEC,WAAW,QAAQ,uBAAuB;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAOjE,OAAO,SAASC,SAASA,CAAC;EAAEC,aAAa;EAAEC;AAAuB,CAAC,EAAsB;EACrF,oBACIH,OAAA,CAACN,CAAC,CAACU,IAAI;IAAAC,QAAA,GACFH,aAAa,KAAK,MAAM,iBAAIF,OAAA,CAAAF,SAAA;MAAAO,QAAA,EAAGF,MAAM,IAAIR,WAAW,CAAC;QAAEQ,MAAM,EAAEA;MAAO,CAAC;IAAC,gBAAG,CAAC,EAC5ED,aAAa,KAAK,OAAO,iBAAIF,OAAA,CAAAF,SAAA;MAAAO,QAAA,EAAGF,MAAM,IAAIP,WAAW,CAAC;QAAEO,MAAM,EAAEA;MAAO,CAAC;IAAC,gBAAG,CAAC;EAAA;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1E,CAAC;AAEjB;AAACC,EAAA,GAPeT,SAAS;AAAA,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}